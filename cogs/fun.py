import sqlite3
import disnake
from disnake.ext import commands
import json
import io
import contextlib
import textwrap
import os
import aiohttp
import pyshorteners
import requests
from googletrans import Translator
from disnake import SelectOption, ButtonStyle
import random
import asyncio
import time
import datetime
from datetime import datetime as dt
import typing
from colorama import Fore, init
from memory_profiler import memory_usage
import httpx
init()

import msgs
import database
import config

requests = httpx.AsyncClient()
translator = Translator()
class AnimalsButton(disnake.ui.View):
	@disnake.ui.button(label="–õ–∏—Å–∞", style=disnake.ButtonStyle.grey, emoji="ü¶ä")
	async def fox(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ –ª–∏—Å—ã',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/fox')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	@disnake.ui.button(label="–°–æ–±–∞–∫–∞", style=disnake.ButtonStyle.grey, emoji="üê∂")
	async def dog(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ —Å–æ–±–∞–∫–∏',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/dog')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	@disnake.ui.button(label="–ö–æ—Ç", style=disnake.ButtonStyle.grey, emoji="üê±")
	async def cat(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ –∫–æ—Ç–∞',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/cat')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	@disnake.ui.button(label="–ü–∞–Ω–¥–∞", style=disnake.ButtonStyle.grey, emoji="üêº")
	async def pandas(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ –ø–∞–Ω–¥—ã',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/panda')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	@disnake.ui.button(label="–ü—Ç–∏—Ü–∞", style=disnake.ButtonStyle.grey, emoji="üê¶")
	async def bird(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ –ø—Ç–∏—Ü—ã',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/bird')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	@disnake.ui.button(label="–ï–Ω–æ—Ç", style=disnake.ButtonStyle.grey, emoji="ü¶ù")
	async def raccon(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ –µ–Ω–æ—Ç–∞',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/raccoon')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	@disnake.ui.button(label="–ö–µ–Ω–≥—É—Ä—É", style=disnake.ButtonStyle.grey, emoji="ü¶ò")
	async def kangaroo(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
		embed = disnake.Embed( title = f'–§–æ—Ç–æ –∫–µ–Ω–≥—É—Ä—É',color=config.main_color)
		response = await requests.get(f'https://some-random-api.ml/img/kangaroo')
		json_data = json.loads(response.text) 
		embed.set_image(url = json_data['link'])
		await interaction.response.edit_message(embed = embed)

	# @disnake.ui.button(label="–ö–æ–∑–∞", style=disnake.ButtonStyle.grey, emoji="üêê")
	# async def lox(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
	# 	embed = disnake.Embed( title = f'–§–æ—Ç–æ –∫–æ–∑—ã',color=config.main_color)
	# 	embed.set_image(url = 'https://cdn.discordapp.com/avatars/913825600790200330/a_0bb0078c1a795f27039ef6b96d960c6d.png?size=1024')
	# 	await interaction.response.edit_message(embed = embed)
		#–¥–æ–±–∞–≤—å —Å—é–¥–∞ GidesPC –∫—É–¥–∞ #
class Fun(commands.Cog):
	def __init__(self, bot):
		self.bot = bot


	@commands.slash_command(description='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É')
	@commands.cooldown(1, 5, commands.BucketType.guild)
	async def ball(self, ctx, –≤–æ–ø—Ä–æ—Å):
		await ctx.response.defer()
		answers = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ :thumbsup:',
'–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ :thumbsup:',
'–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π :thumbsup:',
'–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞ :ok_hand:',
'–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º :ok_hand:',
'–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª :ok_hand:',
'–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ :ok_hand:',
'–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã :ok_hand:',
'–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª :white_check_mark:',
'–î–∞ :ok_hand:',
'–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ :eyes:',
'–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ :eyes:',
'–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å :eyes:',
'–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å :thinking:',
'–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å :eyes:',
'–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π :x:',
'–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª :no_entry:',
'–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª :no_entry_sign:',
'–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ :no_entry:',
'–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ :x:']
		await ctx.send(random.choice(answers))
		
	@commands.slash_command(description='–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É')
	async def coin(self, ctx):
		await ctx.response.defer()
		randomIntOR = random.randint(0, 1)
		if randomIntOR == 0:
			randomIntORoutput = "–æ—Ä—ë–ª"
		else:
			randomIntORoutput = "—Ä–µ—à–∫–∞"
		await ctx.send(f"–ü–æ—Å–º–æ—Ç—Ä–∏–º... –û, —Ç–µ–±–µ –≤—ã–ø–∞–ª {randomIntORoutput}!")
		
	@commands.slash_command(name='simple')
	async def simple(self, ctx):
		pass

	@commands.Cog.listener()
	async def on_button_click(self, ctx):
		if ctx.component.custom_id == "simpledimple":
			embed = disnake.Embed(title=f'–°–∏–º–ø–ª-–¥–∏–º–ø–ª', description=f"""
:black_large_square::black_large_square::black_large_square:
:black_large_square:||:yellow_square:||:black_large_square:
:black_large_square::black_large_square::black_large_square:
:black_large_square:||:blue_square:||:black_large_square:
:black_large_square::black_large_square::black_large_square:""",
			color=config.main_color)
			buttons = disnake.ui.View()
			buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, custom_id="simpledimple",label='–ï—â—ë!'))
			await ctx.send(embed=embed, view=buttons, ephemeral=True)
		if ctx.component.custom_id == "popit":
			cpage = disnake.Embed(
			title = '–ü–æ–ø-–∏—Ç',
			description = f'''
||:red_square:||||:red_square:||||:red_square:||||:red_square:||||:red_square:||||:red_square:||
||:yellow_square:||||:yellow_square:||||:yellow_square:||||:yellow_square:||||:yellow_square:||||:yellow_square:||
||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||
||:green_square:||||:green_square:||||:green_square:||||:green_square:||||:green_square:||||:green_square:||
||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||
||:purple_square:||||:purple_square:||||:purple_square:||||:purple_square:||||:purple_square:||||:purple_square:||''', 
			color=config.main_color
		)
		buttons = disnake.ui.View()
		buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, custom_id="popit",label='–ï—â—ë!'))
		await ctx.send(embed=cpage, view=buttons, ephemeral=True)
	@simple.sub_command(name='dimple', description='–°–∏–º–ø–ª –¥–∏–º–ø–ª')
	async def dimple(self, ctx):
				await ctx.response.defer()
				embed = disnake.Embed(title=f'–°–∏–º–ø–ª-–¥–∏–º–ø–ª', description=f"""
:black_large_square::black_large_square::black_large_square:
:black_large_square:||:yellow_square:||:black_large_square:
:black_large_square::black_large_square::black_large_square:
:black_large_square:||:blue_square:||:black_large_square:
:black_large_square::black_large_square::black_large_square:""",
				color=config.main_color)
				buttons = disnake.ui.View()
				buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, custom_id="simpledimple",label='–ï—â—ë!'))
				await ctx.send(embed=embed, view=buttons)

	@commands.slash_command(name='popit', description='–ê–Ω—Ç–∏-—Å—Ç—Ä–µ—Å—Å –ø–æ–ø-–∏—Ç')
	async def popit(self, ctx):
		await ctx.response.defer()
		cpage = disnake.Embed(
			title = '–ü–æ–ø-–∏—Ç',
			description = f'''
||:red_square:||||:red_square:||||:red_square:||||:red_square:||||:red_square:||||:red_square:||
||:yellow_square:||||:yellow_square:||||:yellow_square:||||:yellow_square:||||:yellow_square:||||:yellow_square:||
||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||
||:green_square:||||:green_square:||||:green_square:||||:green_square:||||:green_square:||||:green_square:||
||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||||:blue_square:||
||:purple_square:||||:purple_square:||||:purple_square:||||:purple_square:||||:purple_square:||||:purple_square:||''', 
			color=config.main_color
		)
		buttons = disnake.ui.View()
		buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, custom_id="popit",label='–ï—â—ë!'))
		await ctx.send(embed=cpage, view=buttons)

	@commands.slash_command(description='–°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ')
	async def casino(ctx):
		await ctx.response.defer()
		winlist = ["‚¨ú‚¨ú‚¨ú\n‚¨ú‚¨ú‚¨ú\n‚¨ú‚¨ú‚¨ú","üüßüüßüüß\nüüßüüßüüß\nüüßüüßüüß","üü¶üü¶üü¶\nüü¶üü¶üü¶\nüü¶üü¶üü¶","üü•üü•üü•\nüü•üü•üü•\nüü•üü•üü•","üü™üü™üü™\n","üü©üü©üü©\nüü©üü©üü©\nüü©üü©üü©","üü®üü®üü®\nüü®üü®üü®\nüü®üü®üü®"]
		loselist = ["üü©üü™üü¶\nüü•üüßüü®\nüü¶üü™üüß","üü®üüßüü™\nüüßüü©‚¨õ\nüüßüü¶üü®","‚¨ú‚¨úüü•\n‚¨úüüß‚¨ú\nüü•‚¨úüü¶","üü¶üüß‚¨ú\nüü•üü©üü®\nüü¶üü®üü™","üü©‚¨úüü©\nüü®üü©üüß\nüü®üüßüü©","üü©üü™üü©\nüü™üüßüü•\nüü´üü©üü•","üü®üü•üü™\nüü™üü©üüß\nüü´üü™üü®","‚¨úüü¶üü•\nüü•üü™üü©\nüü¶üü•üü´","üü¶üüßüü®\nüüßüü©üü®\nüü•üü®üü®","üü©‚¨úüü™\nüü™üü´üü¶\n‚¨ú‚¨õüüß","üü®üü¶‚¨ú\n‚¨ú‚¨õüüß\nüü™üü•üüß"]
		winorlose = ["yes","no","no","no","no"]
		rndwin = random.choice(winlist)
		rndlose = random.choice(loselist)
		wol = random.choice(winorlose)
		if wol == "yes":
			embed = disnake.Embed(title='–¢—ã –≤—ã–∏–≥—Ä–∞–ª', description=rndwin, color=config.success_color)
			await ctx.send(embed=embed)
		elif wol == "no":
			embed = disnake.Embed(title='–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª', description=rndlose, color=config.error_color)
			await ctx.send(embed=embed)

	@commands.slash_command(description='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ë–µ–Ω—É')
	async def ben(self, ctx, *, –≤–æ–ø—Ä–æ—Å):
				await ctx.response.defer()
				OTVET = ["No", "Yes", "Hohoho", "Ugh"]
				OTVETA = random.choice(OTVET)
				embedben = disnake.Embed(title="–ë–µ–Ω",description=f"–ù–∞ –≤–æ–ø—Ä–æ—Å `{–≤–æ–ø—Ä–æ—Å}` –ë–µ–Ω –æ—Ç–≤–µ—Ç–∏–ª: \n **{OTVETA}**", color=config.main_color)
				if OTVETA == "Ugh":
					embedben.set_image(url="https://c.tenor.com/fr6i8VzKJuEAAAAd/talking-ben-ugh.gif")
					await ctx.send(embed=embedben)
				elif OTVETA == "Hohoho":
					embedben.set_image(url="https://c.tenor.com/agrQMQjQTzgAAAAd/talking-ben-laugh.gif")
					await ctx.send(embed=embedben)
				elif OTVETA == "Yes":
					embedben.set_image(url="https://c.tenor.com/6St4vNHkyrcAAAAd/yes.gif")
					await ctx.send(embed=embedben)
				elif OTVETA == "No":
					embedben.set_image(url="https://c.tenor.com/x2u_MyapWvcAAAAd/no.gif")
					await ctx.send(embed=embedben)

	@commands.slash_command(description='–°–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –∫–æ—Ä–æ—Ç–∫–æ–π')
	async def shorturl(ctx, url):
			# await ctx.response.defer()
			s = pyshorteners.Shortener()
			shorten = s.tinyurl.short(url)
			await ctx.send(embed=disnake.Embed(title=":link: | –¢–≤–æ—è —Å—Å—ã–ª–∫–∞",description=shorten,color=config.main_color),ephemeral=True)   

	@commands.slash_command(description='–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö')
	async def animals(self, ctx):
		await ctx.response.defer()
		await ctx.response.send_message(embed = disnake.Embed(title = '–ñ–∏–≤–æ—Ç–Ω—ã–µ', description='–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö', color=config.main_color), view=AnimalsButton())

	@commands.slash_command(description='–†–∞–Ω–¥–æ–º–Ω—ã–µ –º–µ–º—ã')
	async def meme(self, inter):
		await inter.response.defer()
		response = requests.get('https://some-random-api.ml/meme')
		json_data = json.loads(response.text)
		embed = disnake.Embed(color=config.main_color, title = '–ú–µ–º—ã', description = json_data['caption'])
		embed.set_image(url = json_data['image'])
		await inter.send(embed = embed)
     
	"""@commands.Cog.listener()
	async def on_button_click(ctx, button):
	ennmaes = ["fox", "dog", "cat", "panda"]
	runmaes = ["–õ–∏—Å—ã", "–°–æ–±–∞–∫–∏", "–ö–æ—Ç—ã", "–ü–∞–Ω–¥—ã"]
	for i in range (0, 4):
		if button.custom_id == ennmaes[i]:
			embed = discord.Embed(title = f'–§–æ—Ç–æ {runmaes[i]}', color = discord.Color.red())
			embed.set_footer(text=f'–ü–æ –∑–∞–ø—Ä–æ—Å—É {ctx.author}')
			response = requests.get(f'https://some-random-api.ml/img/{ennmaes[i]}')
			json_data = json.loads(response.text) 
			embed.set_image(url = json_data['link']) 
			await ctx.message.edit(embed = embed, view=None)"""
                
    #@commands.command()
	"""async def animals(ctx):
         ennmaes = ["fox", "dog", "cat", "panda"]
	        runmaes = ["–õ–∏—Å–∞", "–°–æ–±–∞–∫–∞", "–ö–æ—Ç", "–ü–∞–Ω–¥–∞"]	
	        em = ["ü¶ä", "üê∂", "üê±", "üêº"]
	       buttons = disnake.ui.View()
	        for i in range(0, 4):
	            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, custom_id=ennmaes[i],label=runmaes[i], emoji=em[i]))
	         await ctx.response.send_message( embed = disnake.Embed( title = '–ñ–∏–≤–æ—Ç–Ω—ã–µ', description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö', color=config.main_color), view=buttons)
	@commands.message_command(name="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫") #–Ω–µ –∑–∞–±—ã–∞–π –ø—Ä–æ self, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω—É —è –≤–ø–µ—Ä–≤—ã–µ –≤ –∫–æ–≥–∞—Ö #–ø–∞—Ä–∞–º–µ—Ç—Ä self –≤–∞—â–µ –ª—é–±–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å, –µ—Å–ª–∏ —Ç—ã –≤ –∫–ª–∞—Å—Å–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –∞ –ø–æ–≥—è–ª
	async def translate_to_russian(self, inter: disnake.ApplicationCommandInteraction, message: disnake.Message):
		#print(message)
		#print(f"{message.content}")
		await inter.response.defer()
		try:
			translatedText = translator.translate(message.content, dest="ru")
			await msgs.succmess(inter, f"–°–æ–æ–±—â–µ–Ω–∏–µ [*{message.content}*]({message.jump_url}) –ø—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n–ü–µ—Ä–µ–≤–æ–¥: `{translatedText.text}`")
		except:
			await inter.send(embed=disnake.Embed(title='<:1828774:1025858045873487922> | –û—à–∏–±–∫–∞..', description='>>> **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ**', color=config.error_color))

	@commands.message_command(name="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")
	async def translate_to_english(self, inter: disnake.ApplicationCommandInteraction, message: disnake.Message):
		#print(message)
		#print(f"{message.content}")
		await inter.response.defer()
		try:
			translatedText = translator.translate(message.content, dest="en")
			await msgs.succmess(inter, f"–°–æ–æ–±—â–µ–Ω–∏–µ [*{message.content}*]({message.jump_url}) –ø—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n–ü–µ—Ä–µ–≤–æ–¥: `{translatedText.text}`")
		except:
			await inter.send(embed=disnake.Embed(title='<:1828774:1025858045873487922> | –û—à–∏–±–∫–∞..', description='>>> **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ**', color=config.error_color))"""


def setup(bot):
	bot.add_cog(Fun(bot))